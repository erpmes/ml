import torchimport torch.nn as nn # Neural Network Modelclass My_Model(nn.Module):    def __init__(self, input_dim):        super(My_Model, self).__init__()        # TODO: modify model's structure, be aware of dimensions.         self.layers = nn.Sequential(            nn.Linear(input_dim, 16),            nn.ReLU(),            nn.Linear(16, 8),            nn.ReLU(),            nn.Linear(8, 1)        )    def forward(self, x):        x = self.layers(x)        x = x.squeeze(1) # (B, 1) -> (B)        return x# 创建模型实例model = My_Model(117)# 加载权重model.load_state_dict(torch.load('./model1/model.ckpt'))# 提取模型权重weights = {}for name, param in model.named_parameters():    weights[name] = param.data.numpy()# 保存权重为txt文件for name, value in weights.items():    with open(f'./model1/{name}.txt', 'w') as f:        f.write('\n'.join(value.flatten().astype(str)))